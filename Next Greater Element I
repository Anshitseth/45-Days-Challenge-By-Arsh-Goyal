class Solution {
public:
    vector<int> nearestGreaterElement(vector<int>& nums)
    {
        vector<int> v;
        stack<int> st;
        for(int i = nums.size()-1;i>=0;i--)
        {
            if(st.size() == 0)
            {
                v.push_back(-1);
            }
            else if(st.size()>0 && st.top()>nums[i])
            {
                v.push_back(st.top());
            }
            else if(st.size()>0 && st.top()<=nums[i])
            {
                while(st.size()>0 && st.top()<=nums[i])
                {
                    st.pop();
                }
                if(st.size() == 0)
                {
                    v.push_back(-1);
                }
                else
                {
                    v.push_back(st.top());
                }
            }
            st.push(nums[i]);
        }
        reverse(v.begin(),v.end());
        return v;
    }
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> mp;
        vector<int> vv = nearestGreaterElement(nums2);
        int n1 = nums1.size();
        int n2 = nums2.size();
        for(int i = 0;i<n2;i++)
        {
            mp[nums2[i]]= vv[i];
        }
        for(int i = 0;i<n1;i++)
        {
            nums1[i] = mp[nums1[i]];
        }
        return nums1;
    }
};
